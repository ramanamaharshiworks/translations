{"ast":null,"code":"const translation = (translation, content) => {\n  const result = Object.assign({}, translation);\n  result.paragraphs = [];\n  const paragraphParts = content.split(\"---\");\n  paragraphParts.forEach(paragraphPart => {\n    var _a, _b;\n\n    const lines = paragraphPart.split('\\n');\n    let currentSection = [];\n    const sections = [];\n    lines.forEach(line => {\n      if (line == '' && currentSection.length > 0) {\n        sections.push(currentSection.join(\" \"));\n        currentSection = [];\n        return;\n      }\n\n      currentSection.push(line);\n    });\n\n    if (currentSection.length > 0) {\n      sections.push(currentSection.join(\" \"));\n    }\n\n    const paragraph = {\n      name: (_a = sections[0]) === null || _a === void 0 ? void 0 : _a.trim(),\n      content: getContentParts(sections[1]),\n      paraphraseTitle: sections[2],\n      paraphrase: getParaphraseParts(sections[3])\n    };\n    paragraph.isTranslationSummary = paragraph.name.startsWith(\"*\");\n    paragraph.name = paragraph.name.replace(\"*\", \"\");\n    (_b = result.paragraphs) === null || _b === void 0 ? void 0 : _b.push(paragraph);\n  });\n  return result;\n};\n\nfunction getParaphraseParts(paraphrase) {\n  if (paraphrase == null) {\n    return [];\n  }\n\n  const paraphraseParts = [];\n  let currentIndex = 0;\n\n  while (currentIndex < paraphrase.length) {\n    const a = paraphrase.indexOf(\"[\", currentIndex);\n\n    if (a == -1) {\n      paraphraseParts.push(paraphrase.substring(currentIndex));\n      break;\n    }\n\n    paraphraseParts.push(paraphrase.substring(currentIndex, a));\n    const b = paraphrase.indexOf(\"]\", a);\n    paraphraseParts.push(paraphrase.substring(a, b + 1));\n    currentIndex = b + 1;\n  }\n\n  return paraphraseParts.map(n => ({\n    text: n,\n    isBracket: n.indexOf(\"[\") >= 0\n  }));\n}\n\nfunction flattenContentParts(contentParts) {\n  let flattenedText = \"\";\n  const result = [];\n\n  for (let i = 0; i < contentParts.length; i++) {\n    const contentPart = contentParts[i];\n\n    if (contentPart.tooltip) {\n      result.push({\n        text: flattenedText + \" \"\n      });\n      result.push({\n        text: contentPart.text,\n        tooltip: contentPart.tooltip\n      });\n      flattenedText = \"\";\n    } else {\n      flattenedText += \" \" + contentPart.text;\n    }\n  }\n\n  if (flattenedText.length > 0) {\n    result.push({\n      text: flattenedText\n    });\n  }\n\n  return result;\n}\n\nfunction getContentParts(content) {\n  const result = [];\n  content = content.replace(\"<br/>\", \" <br/> \");\n  const contentParts = content.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g);\n  if (contentParts == null) return [];\n\n  for (let i = 0; i < contentParts.length; i++) {\n    const contentPart = contentParts[i];\n    const contentPartSections = contentPart.split(\"|\");\n    let tooltip = undefined;\n    let text = contentPartSections[0];\n\n    if (contentPartSections.length > 1) {\n      tooltip = contentPartSections[1].replace(/\\\"/g, \"\").trim();\n      [\",\", \".\", \"¿\", \"?\", \"¡\", \"!\", \";\", \":\", \"-\", \"...\", \")\", \"(\"].forEach(specialInput => {\n        if (tooltip === null || tooltip === void 0 ? void 0 : tooltip.endsWith(specialInput)) {\n          tooltip = tooltip.substring(0, tooltip.length - specialInput.length);\n          text = text + specialInput;\n        }\n      });\n    }\n\n    result.push({\n      text: text,\n      tooltip: tooltip\n    });\n  }\n\n  return flattenContentParts(result);\n}\n\nexport { translation };","map":null,"metadata":{},"sourceType":"module"}